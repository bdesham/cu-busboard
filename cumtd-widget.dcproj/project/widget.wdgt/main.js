/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

// global variables

var stops;

var updateDisplayInterval;

// color scheme

var colors = {
	"black": "#1b1d1e",
	"red_bg": "#d10000",
	"red_fg": "#ffffff",
	"yellow_bg": "#ffc400",
	"yellow_fg": "#000000",
	"green_bg": "#007f00",
	"green_fg": "#ffffff"
};

// default configuration

var config = {
	"time": 30,
	"stop": "IT:1",
	"stop_verbose": "Green and Cedar",
	"key": "afea17046e244cda8f56b5e1fe5f2019"
};

// work around the fact that associative arrays (objects) don't support .length

Object.size = function(obj) {
	var size = 0, key;
	for (key in obj) {
		if (obj.hasOwnProperty(key)) size++;
	}
	return size;
};

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
	
	read_preferences();
	
	startTimer();
	
	//update_data();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
	widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("stop_id"));
	
	stopTimer();
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    stopTimer();
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
	read_preferences();
	//update_data();
	startTimer();
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
	
	update_preferences();
	update_data();
}



function startTimer()
{
    update_data();

    if (!updateDisplayInterval)
        updateDisplayInterval = setInterval(update_data, 1000*30);
}

function stopTimer()
{
    if (updateDisplayInterval) {
        clearInterval(updateDisplayInterval);
        updateDisplayInterval = null;
    }
}




function update_preferences()
{
	// set the stop code
	
	var key = "stop_code";
	var value = document.getElementById("field_stop").value;
	
	window.console.log("value is " + value);
	
	widget.setPreferenceForKey(value, widget.identifier + "-" + key);
	
	read_preferences();
}

function read_preferences()
{
	var stop_code = widget.preferenceForKey(widget.identifier + "-" + "stop_code");

	config = {
		"time": 50,
		"stop_code": stop_code,
		"stop_id": get_intersection_id(stop_code),
		"stop_verbose": get_verbose_stop_name_from_code(stop_code),
		"key": "afea17046e244cda8f56b5e1fe5f2019"
	};
}


function set_title(text)
{
	document.getElementById("top_text").innerText = text;
}

function set_status(text)
{
	document.getElementById("status_text").innerText = text;
}

function array_of_spaces(len)
{
	var arr = [];
	for (var i = 0; i < len; i++) {
		arr[i] = " ";
	}
	return arr;
}

function get_current_time()
{
	var now = new Date();
	var hour = now.getHours();
	var minutes = now.getMinutes();
	
	if (minutes < 10)
		minutes = "0" + minutes;
	
	if (hour <= 11)
		return hour + ":" + minutes + " AM";
	else if (hour == 12)
		return "12:" + minutes + " PM";
	else
		return (hour - 12) + ":" + minutes + " PM";

}

function get_stop_id(stop)
{
	if (stop in stops)
		return stops[stop]["id"];
	else {
		window.console.log("No stop_id found for \"" + stop + "\"");
		return "";
	}
}


function get_intersection_id(stop)
{
	if (stop in stops) {
		var id = stops[stop]["id"];
		return id.replace(/:\d+/, "");
	}
	else {
		window.console.log("No stop_id found for \"" + stop + "\"");
		return "";
	}
}


function get_verbose_stop_name_from_code(stop)
{
	if (stop in stops)
		return stops[stop]["verbose"];
	else {
		window.console.log("No verbose name found for \"" + stop + "\"");
		return "";
	}
}

function get_verbose_stop_name_from_id(id)
{
	for (key in stops) {
		if (stops[key]["id"] == id)
			return stops[key]["verbose"];
	}
	
	window.console.log("No verbose name found for \"" + id + "\"");	
	return "";
}

function refresh_ui_from_data(data)
{
	var list = document.getElementById("list").object;

	var departures = data.departures;
	var dummy = array_of_spaces(departures.length);
	list.setDataArray(dummy);
	
	//
	// departure rows
	//
		
	for (i = 0; i < departures.length; i++) {
		var row = list.rows[i].object;
		var departure = departures[i];
		
		var time = departure.time;
				
		row.templateElements.route_text.innerText = departure.route;
		
		if (time > 0)
			row.templateElements.arrival_time_text.innerText = time + " min";
		else
			row.templateElements.arrival_time_text.innerText = "DUE";
			
		var terminus = get_verbose_stop_name_from_id(departure.ending);
		row.templateElements.route_text.setAttribute("title", "Route ends at " + terminus);
		
		if (time <= 5) {
			row.templateElements.arrival_time_text.style.setProperty("background-color", colors["red_bg"]);
			row.templateElements.arrival_time_text.style.setProperty("color", colors["red_fg"]);
		} else if (time > 5 && time <= 10) {
			row.templateElements.arrival_time_text.style.setProperty("background-color", colors["yellow_bg"]);
			row.templateElements.arrival_time_text.style.setProperty("color", colors["yellow_fg"]);
		} else {
			row.templateElements.arrival_time_text.style.setProperty("background-color", colors["green_bg"]);
			row.templateElements.arrival_time_text.style.setProperty("color", colors["green_fg"]);
		}
	}
	
	//
	// top and bottom labels
	//
	
	set_title(config["stop_verbose"]);
	set_status("Updated at " + get_current_time());
}

function convert_date(date)
{
	var regex = /(\d\d\d\d)-(\d\d)-(\d\d) (\d\d:\d\d:\d\d)/;
	var pieces = regex.exec(date);
	var result = new Date(pieces[2] + "/" + pieces[3] + "/" + pieces[1] + " " + pieces[4] + " GMT-0500");
	
	return result.getTime();
}

function sort_departures(a, b)
{
	return a.time_millis - b.time_millis;
}

function process_json(json)
{
	var result = {"stop": config.stop_verbose, "departures": []};
	var departures = json['departures'];
	var now = Date.now();
	
	window.console.log(departures.length + " departures");
	
	for (var i = 0; i < departures.length; i++) {
		var depart = departures[i];
		
		var expected = convert_date(depart["expected"]);
		var time = Math.floor((expected - now)/(1000*60));
		
		result["departures"][i] = {
			"route": depart["route"],
			"ending": depart["destination"]["stop_id"],
			"time_millis": expected - now,
			"time": time
		};
		
		//window.console.log("route = " + depart["route"] + "; time = " + time);
	}
	
	result.departures.sort(sort_departures);
	
	return result;
}

function update_data()
{
	window.console.log("in update_data()");
	$.getJSON('http://developer.cumtd.com/api/v1.0/json/departures.getListByStop',
		{'key': config.key,
		 'stop_id': config.stop_id,
		 'pt': config.time},
		function success_callback(json)
		{
			if (json.stat == "ok") {
				window.console.log("successfully got data, stat = ok");
			
				var data = process_json(json);
				refresh_ui_from_data(data);
			} else {
				window.console.log("got data from server, but stat = " + stat);
			}
		});
	
	/*window.console.log("putting in some fake data...");
	refresh_ui_from_data(process_json({
		"stat" : "ok",
		"departures" : [
			{
				"destination" : {
					"stop_id" : "LSE:2"
				},
				"expected" : "2011-07-10 22:16:18",
				"route" : "6E OrangeHOPPER"
			},
			{
				"destination" : {"stop_id":"PKLN:1"},
				"expected" : "2011-07-10 22:21:22",
				"route" : "9A Brown"
			},
			{
				"destination" : {"stop_id":"PKLN:1"},
				"expected" : "2011-07-10 23:06:22",
				"route" : "2S Red"
			},
			{
				"destination" : {"stop_id":"PKLN:1"},
				"expected" : "2011-07-10 22:31:22",
				"route" : "120E Teal"
			},
			{
				"destination" : {"stop_id":"PKLN:1"},
				"expected" : "2011-07-10 22:13:22",
				"route" : "6W OrangeHOPPER"
			},
			{
				"destination" : {"stop_id":"PKLN:1"},
				"expected" : "2011-07-10 22:41:22",
				"route" : "50W GreenHOPPER"
			},
			{
				"destination" : {"stop_id":"PKLN:1"},
				"expected" : "2011-07-10 22:21:22",
				"route" : "9A Brown"
			},
			{
				"destination" : {"stop_id":"PKLN:1"},
				"expected" : "2011-07-10 22:06:22",
				"route" : "2S Red"
			},
		]
	}));*/
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

function button_look_up_code_handler(event)
{
    widget.openURL("http://www.cumtd.com/maps-and-schedules/bus-stops");
	return;
}


function button_update_handler(event)
{
    widget.openURL("https://github.com/bdesham/cu-buses");
	return;
}